#+AUTHOR:   Edgar Aroutiounian
#+EMAIL:    edgar.factorial@gmail.com
#+LANGUAGE: en
#+STARTUP: indent
#+OPTIONS:  toc:nil num:0

These are ~js_of_ocaml~ bindings to [[https://github.com/atom/electron][Electron]]. This is a great way to
write cross platform ~OCaml~ GUI programs with the latest and greatest
web based technologies.

* Example
This is an electron program built at a hackathon using basecamp's Trix
editor and these bindings.

[[./electron_working.gif]]

The source code for this program is, *main process* first:

#+BEGIN_SRC ocaml -n
open Nodejs

module B = Electron_main.Browser_window

let () =
  let main_window = ref Js.null in
  let app = new Electron_main.App.app in
  let p = new process in

  Printf.sprintf "Running %s %s on %s" app#name app#version p#platform
  |> print_endline;

  app#on_window_all_closed (fun () -> if p#platform <> "darwin" then app#quit);

  app#on_ready begin fun () ->

    let b = new B.browser_window B.({width = 800; height = 600}) in
    main_window := Js.Opt.return b;

    b#load_url (Printf.sprintf "file://%s/index.html" (__dirname ()));

    b#on_closed (fun () -> main_window := Js.null )

  end
#+END_SRC

And the *renderer process*:

#+BEGIN_SRC ocaml -n
let (>>$) = Js.Opt.bind

module R = Electron_renderer.Remote

let getElementsByClassName (name : string)
  : Dom_html.element Dom.nodeList Js.t =
  Js.Unsafe.meth_call
    Dom_html.document "getElementsByClassName" [|Js.Unsafe.inject (Js.string name)|]

let renderer_program () =
  let script = Dom_html.createScript Dom_html.document in
  script##.src := (Js.string "client/vendor/trix.js");
  Dom.appendChild Dom_html.document##.head script;

  let publish_buttons = getElementsByClassName "editor--publish-button" in

  match Dom.list_of_nodeList publish_buttons with
  | button :: _ ->
    Dom_html.CoerceTo.button button >>$ fun b ->
    Lwt.async begin fun () ->
      Lwt_js_events.clicks b begin fun ev thread ->

        let remote =
          (new R.remote)#browser_window R.({width = 800; height = 600})
        in
        remote#open_dev_tools;

        Lwt.return ()
      end
    end;

    Js.Opt.return ()
  | _ -> assert false

let () = ignore (renderer_program ())
#+END_SRC
Pretty amazing.
